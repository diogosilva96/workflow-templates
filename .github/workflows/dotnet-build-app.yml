on:
  workflow_call: 
    inputs: 
      dotnet-version:
        required: false
        default: '7.x.x'
        type: string
      docker-publish:
        required: false
        default: false
        type: boolean
      environment:
        required: true
        type: string
      docker-image-name:
        required: true
        type: string

jobs:
  generate-semver:
    uses: ./.github/workflows/generate-semver.yml
      
  build-and-test:
    runs-on: ubuntu-latest
    needs: generate-semver
    env:
      coverage_directory: ./coverage
      coverage_report_directory: coverage-report
      publish_directory: ./publish
      tag: ${{ needs.generate-semver.outputs.build-semver }}
    steps:
      - name: ✅ Checkout 
        uses: actions/checkout@v3
        
      - name: ⚙️ Setup .NET Core SDK ${{ inputs.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}
      
      - name: Restore
        run: dotnet restore
      
      - name: 🔨 Build
        run: dotnet build --configuration Release --no-restore
          
      - name: 🧪 Test
        run: dotnet test --no-restore --verbosity normal --collect:"XPlat Code Coverage" --results-directory ${{ env.coverage_directory }}
        
      - name: 👨‍💻 Generate code coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.18
        with:
          reports: ${{ env.coverage_directory }}/**/coverage.cobertura.xml
          targetdir: ${{ env.coverage_report_directory }}
          reporttypes: 'HtmlInline;Cobertura;MarkdownSummary'
          tag: '${{ env.tag }}'
      
      - name: 💻 Display code coverage report
        run: cat ${{ env.coverage_report_directory }}/Summary.md >> $GITHUB_STEP_SUMMARY
    
  publish-image:
    if: ${{ inputs.docker-publish }}
    needs: 
    - build-and-test
    - generate-semver 
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    env: 
      tag: ${{ needs.generate-semver.outputs.semver }}
    steps:
    - name: ✅ Checkout 
      uses: actions/checkout@v3
    
    - name: Replace tag for branch
      run: |
        if [ ${{ github.ref_name }} == 'main' ]; then
          echo "tag=latest" >> $GITHUB_ENV
        fi
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: 🔨 Build Docker image
      run: docker build . --file Dockerfile --tag "${{ inputs.docker-image-name }}:${{ env.tag }}"
       
    - name: 🐋 Push Docker image
      run: docker push "${{ inputs.docker-image-name }}:${{ env.tag }}"
